import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';
import { ENV } from '../config/env';
import * as SecureStore from 'expo-secure-store';
import '../config/firebase';
import axios from 'axios';
import { createApiRequest } from '../services/api/baseApi';
import { getCurrentlyViewedChannel } from './notificationContext';

// Handler for notifications to be displayed
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

/**
 * @function registerForPushNotificationsAsync
 * @description Register for push notifications
 * @returns {Promise<string>} The token of the device
 */
export const registerForPushNotificationsAsync = async () => {
  try {

    if (!Device.isDevice) {
      return null;
    }

    // We check the status of the permissions
    const { status: existingStatus } = await Notifications.getPermissionsAsync();

    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    // If the permission is not granted, we return null
    if (finalStatus !== 'granted') {
      console.log('‚ùå Permission refus√©e pour les notifications push');
      return null;
    }

    // We configure the Android channel
    if (Platform.OS === 'android') {
      await Notifications.setNotificationChannelAsync('default', {
        name: 'default',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#FF231F7C',
      });
    }

    // We get the token
    const tokenData = await Notifications.getExpoPushTokenAsync({
      projectId: ENV.EXPO_PROJECT_ID,
    });

    const token = tokenData.data;
    console.log('‚úÖ Token push r√©cup√©r√© :', token);

    return token;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'enregistrement des notifications:', error);
    return null;
  }
};

/**
 * @function shouldDisplayNotification
 * @description Determine if a notification should be displayed based on business rules
 * @param {Object} messageData - The data of the received message
 * @param {String} currentChannelId - The ID of the currently viewed channel (optional, will use currentlyViewedChannel if not provided)
 * @param {Object} credentials - The user authentication information
 * @returns {Boolean} true if the notification should be displayed, false otherwise
 */
export const shouldDisplayNotification = async (messageData, currentChannelId = null, credentials = null) => {
  try {
    // If there is no message data, we display the default notification
    if (!messageData) {
      console.log('‚ö†Ô∏è Message data missing, default notification authorized');
      return true;
    }

    // If we are examining a push notification generated by the server, we treat it differently
    const isPushNotification = !messageData.login && !messageData.isOwnMessage &&
                                (messageData.title || messageData.body);

    if (isPushNotification) {
      // Get the credentials if necessary for comparison
      if (!credentials) {
        try {
          const credentialsStr = await SecureStore.getItemAsync('userCredentials');
          if (credentialsStr) {
            credentials = JSON.parse(credentialsStr);
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les credentials:', error);
        }
      }

      // Check if the user is already on the channel mentioned in the notification
      // Extract the channel from the notification if it is mentioned in the body
      let notificationChannelId = messageData.channelId;

      if (!notificationChannelId && messageData.body) {
        // Search for keywords that might indicate a channel
        const body = messageData.body.toLowerCase();
        if (body.includes('channel') || body.includes('canal')) {
          // Try to extract the channel name
          const matches = body.match(/channel\s+(\w+)|canal\s+(\w+)/i);
          if (matches && (matches[1] || matches[2])) {
            notificationChannelId = matches[1] || matches[2];
          }
        }
      }

      // Use the provided channel or get it from the context
      const viewedChannelId = currentChannelId || getCurrentlyViewedChannel();

      // If the notification channel ID and the viewed channel ID are both defined, we compare them
      if (notificationChannelId && viewedChannelId) {
        // Clean and compare the channel IDs
        const cleanNotifChannelId = notificationChannelId.toString().replace('channel_', '');
        const cleanViewedChannelId = viewedChannelId.toString().replace('channel_', '');

        // If the notification channel ID and the viewed channel ID are the same, we do not display the notification
        if (cleanNotifChannelId === cleanViewedChannelId) {
          return false;
        }
      }

      // In all other cases, allow the push notification
      return true;
    }

    // If the credentials are not provided, we try to get them
    let userCredentials = credentials;

    if (!userCredentials) {
      // Get the credentials from the secure storage
      const credentialsStr = await SecureStore.getItemAsync('userCredentials');
      if (credentialsStr) {
        userCredentials = JSON.parse(credentialsStr);
      } else {
        // If there are no credentials, we display the default notification
        console.log('‚ö†Ô∏è Credentials missing, default notification authorized');
        return true;
      }
    }

    // Do not display the notification if the message comes from the user himself
    // Check several ways to be sure
    const senderLogin = messageData.login;
    const isOwnMessageFlag = messageData.isOwnMessage === true;
    const isOwnMessageByLogin = senderLogin && userCredentials?.login === senderLogin;
    const isOwnMessageByUsername = messageData.username === 'Me' || messageData.username === 'Moi';

    // If the message comes from the user himself, we do not display the notification
    if (isOwnMessageFlag || isOwnMessageByLogin || isOwnMessageByUsername) {
      return false;
    }

    // Do not display the notification if the user is already on the channel
    const messageChannelId = messageData.channelId ||
                            (messageData.filters?.values?.channel) ||
                            (messageData.notification?.filters?.values?.channel);

    // Use the provided channel or get it from the context
    const viewedChannelId = currentChannelId || getCurrentlyViewedChannel();

    // If the message channel ID and the viewed channel ID are both defined, we compare them
    if (messageChannelId && viewedChannelId) {
      // Clean the IDs to compare them (remove the "channel_" prefix if present)
      const cleanMessageChannelId = messageChannelId.toString().replace('channel_', '');
      const cleanViewedChannelId = viewedChannelId.toString().replace('channel_', '');

      // If the message channel ID and the viewed channel ID are the same, we do not display the notification
      if (cleanMessageChannelId === cleanViewedChannelId) {
        return false;
      }
    }

    // In all other cases, the notification must be displayed
    return true;
  } catch (error) {
    console.error('‚ùå Error when checking the notification conditions:', error);
    // In case of error, we display the default notification
    return true;
  }
};

/**
 * @function playNotificationSound
 * @description Play the notification sound if necessary
 * @param {Object} messageData - The data of the received message
 * @param {String} currentChannelId - The ID of the currently viewed channel (optional)
 * @param {Object} credentials - The user authentication information
 */
export const playNotificationSound = async (messageData, currentChannelId = null, credentials = null) => {
  try {
    const shouldDisplay = await shouldDisplayNotification(messageData, currentChannelId, credentials);

    if (shouldDisplay) {
      // The notification must be displayed, so we use the Notifications API to play the sound
      await Notifications.scheduleNotificationAsync({
        content: {
          title: '', // Empty title for silent notification
          body: '',  // Empty body for silent notification
          sound: true,
          data: { silent: true } // Indication that this is a silent notification (just for the sound)
        },
        trigger: null, // Immediate trigger
      });
    }
  } catch (error) {
    console.error('‚ùå Error when playing the notification sound:', error);
  }
};

/**
 * @function synchronizeTokenWithAPI
 * @description Synchronize the token with the API
 * @param {string} token - The token to synchronize
 * @returns {Promise<boolean>} True if the token is synchronized, false otherwise
 */
export const synchronizeTokenWithAPI = async (token) => {
  try {
    console.log('üîî Token √† synchroniser:', token);

    // We get the credentials
    const credentialsStr = await SecureStore.getItemAsync('userCredentials');

    if (!credentialsStr) {
      return false;
    }

    const credentials = JSON.parse(credentialsStr);

    // We create the request
    const body = createApiRequest({
      'amaiia_msg_srv': {
        'notifications': {
          'synchronize': {
            'action': 'add',
            'accountapikey': credentials.accountApiKey,
            'token': token
          }
        }
      }
    }, credentials.contractNumber, credentials.accessToken);

    // We send the request
    const response = await axios.post(await ENV.API_URL(), body, {
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (response.status === 200) {
      console.log('‚úÖ Token synchronis√© avec succ√®s');
      return true;
    } else {
      console.log('‚ùå Erreur de synchronisation:', response.statusText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e lors de la synchronisation du token:', {
      message: error.message,
      code: error.code,
      response: error.response?.data,
      status: error.response?.status,
      config: {
        url: error.config?.url,
        method: error.config?.method,
        headers: error.config?.headers
      }
    });
    return false;
  }
};